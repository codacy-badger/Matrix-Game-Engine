#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;


uniform sampler2D reflection ;
uniform sampler2D refraction ;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColor;

uniform float moveFactor;


const float waveStrength = 0.008;
const float shineDamper =20.0 ;
const float reflectivity = 0.6;





void main(void) {

	
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2 + 0.5;
	vec2 refractionTexCoords = vec2(ndc.x ,ndc.y);
	vec2 reflectionTexCoords = vec2(ndc.x ,-ndc.y);
	
	float near = 0.1;
	float far = 1000.0;
	float depth = texture(depthMap,refractionTexCoords).r ;
	
	float floorDistance= 2.0 * near * far /(far + near - (2.0 *depth - 1.0)*(far - near) );
	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far /(far + near - (2.0 *depth - 1.0)*(far - near) );
	float waterDepth = floorDistance - waterDistance;
	
	 //	-ndc.y because reflection is up side down

	   
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength *clamp(waterDepth/20.0,0.0,1.0);
	
	refractionTexCoords+=totalDistortion;
	refractionTexCoords = clamp(refractionTexCoords,0.001,0.999);
	
	
	reflectionTexCoords+=totalDistortion;
	reflectionTexCoords.x=clamp(reflectionTexCoords.x,0.001,0.999);
	reflectionTexCoords.y=clamp(reflectionTexCoords.y,-0.999,-0.001);

	
	
	
	vec4 reflection = texture(reflection,reflectionTexCoords);
	vec4 refraction = texture(refraction,refractionTexCoords);
	
	vec4 normalMapColor = texture(normalMap,distortedTexCoords);
	vec3 normal = vec3(normalMapColor.r*2 -1,normalMapColor.b * 0.7,normalMapColor.g*2 -1 );
	vec3 unitNormal = normalize(normal);
	
	
	vec3 unitToCamera = normalize(toCameraVector);
	float refractiveFactor = dot(unitToCamera,unitNormal);
	
	refractiveFactor = clamp(refractiveFactor,0.0,1.0);
	
	//for specular lighting on water
	
	vec3 lightDirection = normalize(fromLightVector);
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	 float specularFactor =dot(reflectedLightDirection,unitToCamera);
	 specularFactor = max(specularFactor,0.0);
	 float dampedFactor = pow(specularFactor,shineDamper);
	 vec3 finalSpecular = lightColor * dampedFactor *  reflectivity*clamp(waterDepth/10.0,0.0,1.0) ;
	
	
	
	
	out_Color = mix(reflection, refraction , refractiveFactor) ;
	
	//Alpha is zero because we are adding
	out_Color = mix(out_Color,vec4(0.0,0.3,0.5,1.0),0.2) + vec4(finalSpecular,0.0) ;
	
	out_Color.a = clamp(waterDepth/10.0,0.0,1.0);

}